/**
 * (C) Copyright 2016 by Jiyan Akg√ºl.
 */
var VGL;
(function (VGL) {
    var Entities;
    (function (Entities) {
        class Grid extends VGL.Entity {
            /**
             * @param width (Background and Ground) In Block size (default = 10)
             * @param height (Background) In Block size (default = 10)
             * @param depth (Ground) In Block size (default = 10)
             * @param Parent Entity this is added to
             */
            constructor(Parent, width = 10, height = 10, depht = 10) {
                super(Parent);
                this.BoxWidth = 2;
                this.BoxHeight = 2;
                this.OffsetZ = 0;
                this.OffsetY = 0;
                this.HighlightedFields = [];
                this.width = width;
                this.height = height;
                this.depht = depht;
                this.GridY = new Array(this.height * this.width);
                this.GridZ = new Array(this.height * this.depht);
                var PlaneGeometry = new THREE.PlaneBufferGeometry(2, 2);
                var PlaneMaterial = new THREE.MeshBasicMaterial({ color: 0xFF0000, fog: false, shading: THREE.FlatShading, transparent: true, opacity: 0 });
                //var PlaneMaterial = new THREE.MeshBasicMaterial({color:0xFF0000});
                //var Plane = new THREE.Mesh(PlaneGeometry,PlaneMaterial);
                for (var y = 0; y < this.height; y++) {
                    for (var x = 0; x < this.width; x++) {
                        var Plane = new THREE.Mesh(PlaneGeometry, PlaneMaterial.clone());
                        var edge = new THREE.EdgesHelper(Plane, 0x000);
                        edge.position.set(x * this.BoxWidth, y * this.BoxHeight, this.OffsetZ);
                        Plane.position.set(x * this.BoxWidth, y * this.BoxHeight, this.OffsetZ);
                        Plane.userData = { isGridElement: true, GridPlane: 0, x: x, y: y, Position: Plane.position };
                        edge.userData = { isGridElement: true, GridPlane: 0, x: x, y: y, Position: Plane.position };
                        this.getScene().add(edge);
                        this.getScene().add(Plane);
                        this.GridY[y * this.width + x] = Plane;
                    }
                }
                for (var z = 1; z < this.depht; z++) {
                    for (var x = 0; x < this.width; x++) {
                        var Plane = new THREE.Mesh(PlaneGeometry, PlaneMaterial.clone());
                        var edge = new THREE.EdgesHelper(Plane, 0x000);
                        edge.position.set(x * this.BoxWidth, this.OffsetY, z * 2);
                        Plane.position.set(x * this.BoxWidth, this.OffsetY, z * 2);
                        Plane.rotation.x = -Math.PI / 2;
                        Plane.userData = { isGridElement: true, GridPlane: 1, x: x, z: z, Position: Plane.position };
                        edge.userData = { isGridElement: true, GridPlane: 1, x: x, z: z, Position: Plane.position };
                        this.getScene().add(edge);
                        this.getScene().add(Plane);
                        this.GridZ[z * this.width + x] = Plane;
                    }
                }
            }
            /**
             * This gets called from a click/touch Callback if the interescted Element is a Field in this Grid
             * @param userData Stored in the userData of a THREE.Mesh which was generated by this Grid
             * @constructor
             */
            HighlightField(userData) {
                // 0. Get the Grid of the selected Field
                var grid;
                var yz = 0;
                switch (userData.GridPlane) {
                    case 0:// GridY
                        grid = this.GridY;
                        yz = userData.y;
                        break;
                    case 1:
                        grid = this.GridZ;
                        yz = userData.z;
                        break;
                    default:
                        console.error("Unknown Grid Number");
                        return;
                }
                // 1. Remove Highlight of other Fields
                this.HighlightedFields
                    .filter((f) => f.GridPlane == userData.GridPlane) // Get all selected Fields from this GridPlane
                    .forEach((e) => { e.field.material.setValues({ transparent: true }); }); // Make them transparent again
                this.HighlightedFields = this.HighlightedFields // Set the Array to the filtered Array :
                    .filter((f) => f.GridPlane != userData.GridPlane); // Get all Fields without selected Fields from this GridPlane
                // This removes all Fields from the GridPlane out of this Array
                // 2. Highlight the selected Field
                grid[yz * this.width + userData.x].material.setValues({ transparent: false });
                // 3. Store the Change in this Array to remove it later
                this.HighlightedFields.push({ GridPlane: userData.GridPlane, field: grid[yz * this.width + userData.x] });
            }
            /**
             * Clears Highlighted Fields
             * @param GridPlane null=>All || 0=>Y Grid (Background) || 1=>Z Grid (Ground)
             * @constructor
             */
            HighlightClear(GridPlane = null) {
                // Call this function recursive for all Grid Planes if no one was set
                // This means it clears all grids
                if (GridPlane == null) {
                    this.HighlightClear(0);
                    this.HighlightClear(1);
                    return;
                }
                // 0. Get the Grid of the selected Field
                var grid;
                switch (GridPlane) {
                    case 0:// GridY
                        grid = this.GridY;
                        break;
                    case 1:
                        grid = this.GridZ;
                        break;
                    default:
                        console.error("Unknown Grid Number");
                        return;
                }
                // 1. Remove Highlight of all Fields
                this.HighlightedFields
                    .filter((f) => f.GridPlane == GridPlane) // Get all selected Fields from this GridPlane
                    .forEach((e) => { e.field.material.setValues({ transparent: true }); }); // Make them transparent again
                this.HighlightedFields = this.HighlightedFields // Set the Array to the filtered Array :
                    .filter((f) => f.GridPlane != GridPlane); // Get all Fields without selected Fields from this GridPlane
                // This removes all Fields from the GridPlane out of this Array
            }
        }
        Entities.Grid = Grid;
    })(Entities = VGL.Entities || (VGL.Entities = {}));
})(VGL || (VGL = {}));
//# sourceMappingURL=Grid.js.map